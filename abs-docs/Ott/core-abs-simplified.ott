%embed
%{{ tex-preamble \usepackage{stmaryrd} }}
indexvar i, j, n ::= 
      {{ lex numeral }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com index variables (subscripts) }}
metavar I ::=
      {{ lex Alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com interface name }}
metavar var ::=
      {{ lex alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com variable }}
metavar bo ::=
      {{ lex alphanum }}
      {{ coq bool }}
      {{ coq-equality }}
      {{ com boolean expression }}
metavar t ::=
      {{ lex alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com term }}
metavar Dd ::=
      {{ lex alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com datatype definition }}
metavar F ::=
      {{ lex alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com function definition }}
metavar type ::=
      {{ lex alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com ground type }}
metavar C ::=
      {{ lex Alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com class name }}
metavar m ::=
      {{ lex alphanum }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com method name }}
metavar oid ::= 
      {{ lex numeral }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com object identifier }}
metavar fu {{ tex \mathit{f} }} ::=
      {{ lex numeral }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com future identifier }}      
metavar cid ::= 
      {{ lex numeral }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com cog identifier }}
grammar
%%% FUNCTIONAL LEVEL SYNTAX %%%
x, y :: x_ ::=
     {{ coq var }}
     | var :: M :: var
       {{ coq [[var]] }}
     | cog :: M :: cog
       {{ coq 0 }}

xl {{ tex \overline{x} }}, yl {{ tex \overline{y} }} :: xl_ ::=
  {{ com variable list }}
  | x1 , ... , xn :: :: x_list

T :: T_ ::=
  {{ coq type }}
  {{ com ground type }}
  | type :: M :: type
    {{ coq [[type]] }}
  | returns ( getclass ( o ) , m ) :: M :: returns
    {{ coq (returns (getclass [[o]]) [[m]]) }}
  | Fut < T > :: M :: fut
    {{ com future type }}
    {{ coq 0 }}
  | cogtp :: M :: cog
    {{ com cog type }}
    {{ coq 1 }}

Tl {{ tex \overline{T} }} :: Tl_ ::=
  {{ com ground type list }}
  | T1 , ... , Tn :: :: t_list

Ddl {{ tex \overline{Dd} }} :: Ddl_ ::=
  {{ com datatype definition list }}
  | Dd1 ... Ddn :: :: dd_list

Fl {{ tex \overline{F} }} :: Fl_ ::=
  {{ com function definition list }}
  | F1 ... Fn :: :: f_list

Tlx {{ tex \overline{T} \; \overline{x} }} :: Tlx_ ::=
  {{ com ground type variable declaration list }}  
  | T1 x1 , ... , Tn xn :: :: tx_list

b :: b_ ::=
  {{ coq bo }}
  {{ com boolean }}
  | bo :: M :: bool
    {{ coq [[bo]] }}
  | True :: M :: true
    {{ coq true }}
  | False :: M :: false
    {{ coq false }}
  | bb ( a ) :: M :: eval_b
    {{ tex [[bb]]_{[[a]]} }}
    {{ coq ([[bb]] [[a]]) }}
  | gb ( cn , a ) :: M :: eval_g
    {{ tex [[gb]]^{[[cn]]}_{[[a]]} }}
    {{ coq ([[gb]] [[cn]] [[a]]) }}
    
e :: e_ ::=
  {{ com expression }}
  | x :: :: var	
    {{ com variable }}
  | t :: :: term 	
    {{ com ground term }}
  | e + e' :: :: plus
    {{ com plus }}
  | v :: :: v
    {{ com value }}

el {{ tex \overline{e} }} :: el_ ::=
  {{ com expression list }}
  | e1 , ... , en :: :: e_list

%%% CONCURRENT OBJECT LEVEL SYNTAX %%%
P :: P_ ::=
  {{ com program }}
  | Ddl Fl Ifl Cll { Tlx ; s ; } :: :: program

If {{ tex IF }} :: If_ ::=
  {{ com interface definition }}  
  | interface I { Sgl } :: :: if

Ifl {{ tex \overline{IF} }} :: Ifl_ ::=
  {{ com interface definition list }}  
  | If1 ... Ifn :: :: if_list

Il {{ tex \overline{I} }} :: Il_ ::=
  {{ com interface name list }}  
  | I1 , ... , In :: :: i_list
  
Cl {{ tex CL }} :: Cl_ ::=
  {{ com class definition }}
  | class C { Tlx ; Ml } :: :: cl
  | class C ( Tlx ) { Tlx' ; Ml } :: :: cl_param
  | class C implements Il { Tlx ; Ml } :: :: cl_impl
  | class C ( Tlx ) implements Il { Tlx' ; Ml } :: :: cl_impl_param

Cll {{ tex \overline{CL} }} :: Cll_ ::=
  {{ com class definition list }}  
  | Cl1 ... Cln :: :: cl_list

Sg :: Sg_ ::=
  {{ com method signature }}
  | T m ( Tlx ) :: :: sg

Sgl {{ tex \overline{Sg} }} :: Sgl_ ::=
  {{ com method signature list }}  
  | Sg1 ; ... ; Sgn :: :: sg_list

M :: M_ ::=
  {{ com method definition }}
  | Sg { Tlx ; s ; return e ; } :: :: def

Ml {{ tex \overline{M} }} :: Ml_ ::=
  {{ com method definition list }}  
  | M1 ... Mn :: :: m_list

g :: g_ ::=
  {{ com guard }}
  | b :: :: b
  | e ? :: :: e
  | g /\ g' :: :: g_g

s :: s_ ::=
  {{ com statement }}
  | s ; s'  :: :: composition 
    {{ com composition }}
  | x = rhs :: :: assign 
    {{ com assignment }}
  | suspend :: :: suspend 
    {{ com suspend }}
  | await g :: :: await 
    {{ com await guard }}
  | skip :: :: skip  
    {{ com skip }}
  | if b { s } :: :: if 
    {{ com if }}
  | if b { s } else { s' } :: :: if_else
    {{ com if else }}
  | while b { s } :: :: while
    {{ com while loop }}

rhs :: rhs_ ::=
  {{ com assignment right-hand side }}
  | e :: :: e
    {{ com expression }}
  | new local C ( el ) :: :: new_local
    {{ com new local object (same cog) }}
  | new C ( el ) :: :: new_cog
    {{ com new object and cog }}
  | e ! m ( el ) :: :: async_call
    {{ com asynchronous call }}
  | e . m ( el ) :: :: sync_call
    {{ com synchronous call }}
  | e . get :: :: get
    {{ com future value }}

%%% RUNTIME SYNTAX %%%
o :: o_ ::=
  {{ com object identifier }}
  {{ coq oid }}
  | oid :: M :: oid
    {{ coq [[oid]] }}
  | start :: M :: start
    {{ coq 0 }}

cn :: cn_ ::=
  {{ com configuration }}
  | noconf :: :: noconf
  | futrt :: :: fut 
  | object :: :: object 
  | invocrt :: :: invoc
  | cogrt :: :: cog
  | cn cn' :: :: composition
    {{ tex [[cn]] \; [[cn']] }}
%   | start ( P ) :: M :: start

st :: st_ ::=
  {{ com state }}
  | { cn } :: :: cn

futrt {{ tex \mathit{fut} }} :: futrt_ ::=
  {{ com future }}
  | fut ( fu , val ) :: :: fut

object :: object_ ::=
  {{ com object }}
  | ob ( o , a , pr , q ) :: :: ob

sp {{ tex s_p }} :: sp_ ::=
  {{ com process statement }}
  | return e :: :: return
    {{ com return }}
  | cont ( fu ) :: :: cont
    {{ com continue other process }}
  | s :: :: s
    {{ com statement }}

spl {{ tex \overline{s_p} }} :: spl_ ::=
   {{ coq list sp }}
   {{ com process statement list }}
   | emptyspl :: M :: empty
     {{ tex \epsilon }}
     {{ coq nil }}
   | sp : spl :: M :: head
     {{ tex [[sp]] ; [[spl]] }}
     {{ coq ([[sp]] :: [[spl]]) }}
   | spl ++ spl' :: M :: tail
     {{ tex [[spl]] ; [[spl']] }}
     {{ coq ([[spl]] ++ [[spl']]) }}
   | sp :: M :: singleton
     {{ coq ([[sp]] :: nil) }}
   | listof ( s ) :: M :: listof
     {{ coq (listof [[s]]) }}

process :: process_ ::=
  {{ com process }}
  | { a '|' spl } :: :: proc
  | error :: :: error

q :: q_ ::=
  {{ com pool of suspended processes }}
  | noproc :: :: noproc
  | process :: :: process
  | q q' :: :: composition
  | q cup pr :: M :: add
    {{ coq (add_process [[q]] [[pr]]) }}
  | { pr } :: M :: singleton
    {{ coq (add_process q_noproc [[pr]]) }}    
  | q \ pr :: M :: remove
    {{ coq (remove_process [[q]] [[pr]]) }}

invocrt {{ tex \mathit{invoc} }} :: invocrt_ ::=
  {{ com method invocation }}
  | invoc ( o , fu , m , vl ) :: :: invoc

co {{ tex \mathit{c} }} :: co_ ::=
  {{ com cog identifier }}
  {{ coq cid }}
  | cid :: M :: cid
    {{ coq [[cid]] }}
  | main :: M :: main
    {{ coq 0 }}

cogrt {{ tex \mathit{cog} }} :: cogrt_ ::=
  {{ com concurrent object group }}
  | cogt ( co , act ) :: :: cog

val :: val_ ::=
  {{ com value }}
  | v :: :: v
  | noval :: :: noval

a, l :: a_ ::=
  {{ com substitution }}
  | Txv :: :: Txv
  | a , a' :: :: composition
  | a circ a' :: M :: comp2
    {{ coq (merge_subst [[a]] [[a']]) }}
  | a [ x |-> v ] :: M :: addition
    {{ coq (replace [[x]] [[v]] [[a]]) }}
  | atts ( C , vl , o , co ) :: M :: atts
    {{ coq (atts_class [[C]] [[vl]] [[o]] [[co]]) }}
  | Tl xl atts ( Tl' ) :: M :: atts_t
    {{ coq (atts_block [[Tl]] [[xl]] [[Tl']]) }}

Txv {{ tex T\, x\, v }} :: Txv_ ::=
    | T x v :: :: txv

pr {{ tex \mathit{p} }} :: pr_ ::=
   {{ com active process }}
   | process :: :: process
   | idle :: :: idle
   | bind ( o , fu , m , vl , getclass ( o' ) ) :: M :: bind
     {{ com process resulting from activation of method in class }}
     {{ coq (bind [[o]] [[fu]] [[m]] [[vl]] (getclass [[o']])) }}
   | init ( C ) :: M :: init
     {{ coq (init_of_class [[C]]) }}
   | select ( q , a , cn ) :: M :: select
     {{ coq (select_process [[q]] [[a]] [[cn]]) }}

v :: v_ ::=
  {{ com value }}
  | o :: :: o
  | co :: :: co
  | fu :: :: fut
  | b :: :: b
  | t :: :: t
  | null :: :: null
  | ev ( a ) :: M :: eval_e
    {{ tex [[ev]]_{[[a]]} }}
    {{ coq ([[ev]] [[a]]) }}
%  | a ( x ) :: M :: var
%  | a ( cog ) :: M :: cog
%    {{ coq (lookup 0 [[a]]) }}
%  | a ( destiny ) :: M :: destiny
%    {{ coq (lookup 1 [[a]]) }}

vl {{ tex \overline{v} }} :: vl_ ::=
  {{ com value list }}
  | v1 , ... , vn :: :: v_list
  | elvl ( a ) :: M :: eval
     {{ tex [[elvl]]_{[[a]]} }}
     {{ coq ([[elvl]] [[a]]) }}

act :: act_ ::=
  {{ com active object }}
  | o :: :: o
  | noact :: :: noact

ev {{ tex \mathrm{eval}(e) }} :: ev_ ::=
   {{ coq e -> a -> v }}
   | |[ e ]| :: M :: e
     {{ coq (eval_expr [[e]]) }}

elvl {{ tex \mathrm{eval}(\overline{e}) }} :: elvl_ ::=
    {{ coq a -> vl }}
    | |[ el ]| :: M :: el
      {{ coq (fun (a5 : a) => vl_v_list (map (fun (e5 : e) => eval_expr e5 a5) (match [[el]] with el_e_list ls => ls end))) }}

bb {{ tex \mathrm{eval}(b) }} :: bb_ ::=
   {{ coq a -> b }}
   | |[ b ]| :: M :: b
     {{ coq (eval_bool [[b]]) }}

gb {{ tex \mathrm{eval}(g) }} :: gb_ ::=
   {{ coq cn -> a -> b }}
   | |[ g ]| :: M :: g
     {{ coq (eval_guard [[g]]) }}

%%% TERMINALS %%%
terminals :: terminals_ ::=
	  | < :: :: langle {{ tex \langle }}
	  | > :: :: rangle {{ tex \rangle }}
	  | True :: :: true {{ tex \mathrm{True} }}
	  | False :: :: false {{ tex \mathrm{False} }}
  	  | {  :: :: leftbrace {{ tex \{ }}
	  | }  :: :: rightbrace {{ tex \} }}
  	  | circ :: :: circ {{ tex \circ }}
    	  | ->  :: :: arrow {{ tex \rightarrow }}
	  | dom :: :: dom {{ tex \mathrm{dom} }}
	  | in :: :: in {{ tex \in }}
	  | noconf :: :: noconf {{ tex \epsilon }}
	  | noval :: :: noval {{ tex \bot }}
	  | noproc :: :: noproc {{ tex \emptyset }}
	  | noact :: :: noact {{ tex \varepsilon }}
  	  | invoc :: :: invoc {{ tex \mathsf{invoc} }}
	  | cogt :: :: cogt {{ tex \mathsf{cog} }}
	  | ob :: :: ob {{ tex \mathsf{ob} }}
  	  | fut :: :: fut {{ tex \mathsf{fut} }}
	  | atts :: :: atts {{ tex \mathrm{atts} }}
	  | getclass :: :: getclass {{ tex \mathrm{class} }}
	  | bind :: :: bind {{ tex \mathrm{bind} }}
	  | select :: :: select {{ tex \mathrm{select} }}
	  | start :: :: start {{ tex \mathrm{start} }}
	  | main :: :: main {{ tex \mathrm{main} }}
	  | init :: :: init {{ tex \mathrm{init} }}
	  | \ :: :: setminus {{ tex \setminus }}
	  | returns :: :: returns {{ tex \mathrm{returns} }}
	  | |[ :: :: lbracket {{ tex || }} %{{ tex \llbracket }}
	  | ]| :: :: rbracket {{ tex || }} %{{ tex \rrbracket }}
	  | listof :: :: listof {{ tex \mathrm{listof} }}
	  | |-> :: :: mapsto {{ tex \mapsto }}
	  | cup :: :: cup {{ tex \cup }}

formula :: formula_ ::=
	| judgement :: :: judgement
	  {{ com judgement }}
	| b = b' :: M :: b_eq
	  {{ com boolean equality }}
	  {{ coq ([[b]] = [[b']]) }}
	| v = v' :: M :: v_eq
	  {{ com value equality }}
	  {{ coq ([[v]] = [[v']]) }}
	| x in dom ( a ) :: M :: x_a
	  {{ com in domain for substitution }}
	  {{ coq (lookup [[x]] [[a]] <> None) }}
	| fresh ( fu ) :: M :: fresh_f
	  {{ com fresh future identifier }}
	  {{ coq (fresh_future [[fu]]) }}
	| fresh ( x ) :: M :: fresh_x
	  {{ com fresh variable }}
	  {{ coq (fresh_var [[x]]) }}
	| vl = vl' :: M :: vl_eq
	  {{ com value list equality }}	  
	  {{ coq ([[vl]] = [[vl']]) }}
	| pr = pr' :: M :: pr_eq
	  {{ com process equality }}
	  {{ coq ([[pr]] = [[pr']]) }}
	| l ( destiny ) = fu :: M :: destiny_eq_fu
	  {{ com destiny lookup equals future }}
	  {{ coq (lookup 0 [[l]] = Some (v_fut [[fu]])) }}
	| a ( cog ) = co :: M :: cog
	  {{ com cog lookup equals cog }}
	  {{ coq (lookup 0 [[a]] = Some (v_co [[co]])) }}
	| T = T' :: M :: T_eq
	  {{ com type equality }}
	  {{ coq ([[T]] = [[T']]) }}
	| a ( cog ) =/= a' ( cog ) :: M :: a_cog_neq
	  {{ com unequal cogs }}
	  {{ coq (lookup 0 [[a]] <> lookup 0 [[a']]) }}
	| fresh ( o ) :: M :: fresh_o	
	  {{ com fresh object identifier }}
	  {{ coq (fresh_object_id [[o]]) }}
	| a = a' :: M :: apr_eq
	  {{ com subsitution equality }}
	  {{ coq ([[a]] = [[a']]) }}
	| fresh ( co ) :: M :: fresh_co
	  {{ com fresh cog identifier }}
	  {{ coq (fresh_cog_id [[co]]) }}
	| spl = spl' :: M :: spl_eq
	  {{ com statement list equality }}
	  {{ coq ([[spl]] = [[spl']]) }}

%%% PARSING %%%
parsing
cn_composition left cn_composition

%%% EMBED %%%
embed
{{ coq 
Definition listof (s5 : s) : list sp := nil.
Definition merge_subst (a5 : a) (a' : a) : a := a5.
Definition eval_bool (b5 : b) (a5 : a) : b := true.
Definition eval_expr (e5 : e) (a5 : a) : v := v_b true.
Definition lookup (x5 : x) (a5 : a) : option v := None.
Definition replace (x5 : x) (v5 : v) (a5 : a) : a := a5.
Definition add_process (q5 : q) (pr5 : pr) : q := q5.
Definition fresh_future (fu5 : fu) : Prop := True.
Definition getclass (o5 : o) : C := 0.
Definition bind (o5 : o) (fu5 : fu) (m5 : m) (vl5 : vl) (C5 : C) : pr := pr_idle.
Definition returns (C5 : C) (m5 : m) : T := 0.
Definition fresh_var (x5 : x) : Prop := True.
Definition init_of_class (C5 : C) : pr := pr_idle.
Definition fresh_object_id (o5 : o) : Prop := True.
Definition atts_class (C5 : C) (vl5 : vl) (o5 : o) (co5 : co) : a := a_Txv (Txv_txv 0 0 (v_b true)).
Definition fresh_cog_id (co5 : co) : Prop := True.
Definition eval_guard (g5 : g) (cn5 : cn) (a5 : a) : b := true.
Definition select_process (q5 : q) (a5 : a) (cn5: cn) : pr := pr_idle.
Definition remove_process (q5 : q) (pr5 : pr) := q5.
Definition atts_block (Tl5 : Tl) (xl5 : xl) (Tl6 : Tl) : a := a_Txv (Txv_txv 0 0 (v_b true)).
}}

%%% FUNCTIONS %%%
%funs
%  aux ::=
%
%fun 
%  p :: xs :: vars 
%  {{ com function that returns variables in patterns }} by
%  _ === { }
%  t === { }
%  x === { x }
%  Co ( p1 , ... , pn ) === vars ( p1 ) cup ... cup vars ( pn )

%%% OPERATIONAL SEMANTICS RULES %%%
defns 
  operational_semantics :: '' ::=

defn start ( P ) = cn :: :: cn_start :: ''
           {{ tex \begin{array}{c}[[start]] ( [[P]] ) [[=]]\\ [[cn]] \end{array} }}
     	   {{ com start configuration for program }} by

  spl = listof ( s )
  ----------------------------------------------------------------------------------------------------------------------------------- :: start
  start ( Ddl Fl Ifl Cll { Tlx ; s ; } ) = cogt ( main , start ) ob ( start , cogtp cog main , { Tl xl atts ( Tl ) | spl } , noproc )
  
defn
  cn -> cn' :: :: cn_red :: ''
     {{ tex \begin{array}{c}[[cn]] \\[[->]] [[cn']]\end{array} }}
     {{ com configuration reduction }} by

  ----------------------------------------------------------------------- :: skip
  ob ( o , a , { l | skip : spl } , q ) -> ob ( o , a , { l | spl } , q )

  x in dom ( l )
  :formula_v_eq: |[ e ]| ( a circ l ) = v
  ------------------------------------------------------------------------------------ :: assign_local
  ob ( o , a , { l | x = e : spl } , q ) -> ob ( o , a , { l [ x |-> v ] | spl } , q )

  x in dom ( a )
  :formula_v_eq: |[ e ]| ( a circ l ) = v
  ------------------------------------------------------------------------------------ :: assign_field
  ob ( o , a , { l | x = e : spl } , q ) -> ob ( o , a [ x |-> v ] , { l | spl } , q )

  :formula_b_eq: |[ b ]| ( a circ l ) = True
  --------------------------------------------------------------------------------------------- :: cond_true
  ob ( o , a , { l | if b { s } else { s' } : spl } , q ) -> ob ( o , a , { l | s : spl } , q )

  :formula_b_eq: |[ b ]| ( a circ l ) = False
  ---------------------------------------------------------------------------------------------- :: cond_false
  ob ( o , a , { l | if b { s } else { s' } : spl } , q ) -> ob ( o , a , { l | s' : spl } , q )

  :formula_b_eq: |[ b ]| ( a circ l ) = True
  --------------------------------------------------------------------------------- :: cond_simple_true
  ob ( o , a , { l | if b { s } : spl } , q ) -> ob ( o , a , { l | s : spl } , q )

  :formula_b_eq: |[ b ]| ( a circ l ) = False
  ----------------------------------------------------------------------------- :: cond_simple_false
  ob ( o , a , { l | if b { s } : spl } , q ) -> ob ( o , a , { l | spl } , q )

  :formula_b_eq: |[ b ]| ( a circ l ) = True
  ---------------------------------------------------------------------------------------------------- :: while_true
  ob ( o , a , { l | while b { s } : spl } , q ) -> ob ( o , a , { l | s : while b { s } : spl } , q )

  :formula_b_eq: |[ b ]| ( a circ l ) = False
  -------------------------------------------------------------------------------- :: while_false
  ob ( o , a , { l | while b { s } : spl } , q ) -> ob ( o , a , { l | spl } , q )

  ----------------------------------------------------------------------------------- :: suspend
  ob ( o , a , { l | suspend : spl } , q ) -> ob ( o , a , idle , q cup { l | spl } )

  -------------------------------------------------------------------------------------- :: release_cog
  ob ( o , a , idle , q ) cogt ( co , o ) -> ob ( o , a , idle , q ) cogt ( co , noact )

  :formula_v_eq: |[ e ]| ( a circ l ) = o'
  |[ el ]| ( a circ l ) = vl
  fresh ( fu )
  ------------------------------------------------------------------------------------------------------------------------------------------ :: async_call
  ob ( o , a , { l | x = e ! m ( el ) : spl } , q ) -> ob ( o , a , { l | x = fu : spl } , q ) invoc ( o' , fu , m , vl ) fut ( fu , noval )

  bind ( o , fu , m , vl , getclass ( o ) ) = pr'
  -------------------------------------------------------------------------------- :: bind_mtd
  ob ( o , a , pr , q ) invoc ( o , fu , m , vl ) -> ob ( o , a , pr , q cup pr' )

  :formula_v_eq: |[ e ]| ( a circ l ) = v
  l ( destiny ) = fu
  ------------------------------------------------------------------------------------------------------------- :: ret
  ob ( o , a , { l | return e : spl } , q ) fut ( fu , noval ) -> ob ( o , a , { l | spl } , q ) fut ( fu , v )

  -------------------------------------------------------------- :: idle
  ob ( o , a , { l | emptyspl } , q ) -> ob ( o , a , idle , q )

  :formula_v_eq: |[ e ]| ( a circ l ) = fu
  -------------------------------------------------------------------------------------------------------------------- :: read_fut
  ob ( o , a , { l | x = e . get : spl } , q ) fut ( fu , v ) -> ob ( o , a , { l | x = v : spl } , q ) fut ( fu , v ) 

  :formula_v_eq: |[ e ]| ( a circ l ) = o'
  |[ el ]| ( a circ l ) = vl
  fresh ( fu )
  a' ( cog ) = co
  l ( destiny ) = fu'
  bind ( o' , fu , m , vl , getclass ( o' ) ) = { l' | spl' }
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- :: cog_sync_call
  ob ( o , a , { l | x = e . m ( el ) : spl } , q ) ob ( o' , a' , idle , q' ) cogt ( co , o ) -> ob ( o , a , idle , q cup { l | x = fu . get : spl } ) fut ( fu , noval ) ob ( o' , a' , { l' | spl' ++ cont ( fu' ) } , q' ) cogt ( co , o' )

  a' ( cog ) = co
  l' ( destiny ) = fu
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- :: cog_sync_return_sched
  ob ( o , a , { l | cont ( fu ) } , q ) cogt ( co , o ) ob ( o' , a' , idle ,  q' cup { l' | spl } ) -> ob ( o , a , idle , q ) cogt ( co , o' ) ob ( o' , a' , { l' | spl } , q' )

  l ( destiny ) = fu'
  :formula_v_eq: |[ e ]| ( a circ l ) = o
  |[ el ]| ( a circ l ) = vl
  fresh ( fu )
  bind ( o , fu , m , vl , getclass ( o ) ) = { l' | spl' }
  ------------------------------------------------------------------------------------------------------------------------------------------------------ :: self_sync_call
  ob ( o , a , { l | x = e . m ( el ) : spl } , q ) -> ob ( o , a , { l' | spl' ++ cont ( fu' ) }, q cup { l | x = fu . get : spl } ) fut ( fu , noval )
  
  l' ( destiny ) = fu
  ------------------------------------------------------------------------------------------ :: self_sync_return_sched
  ob ( o , a , { l | cont ( fu ) } , q cup { l' | spl } ) -> ob ( o , a , { l' | spl } , q )

  :formula_v_eq: |[ e ]| ( a circ l ) = o'
  fresh ( y )
  returns ( getclass ( o' ) , m ) = T
  a ( cog ) =/= a' ( cog )
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ :: rem_sync_call
  ob ( o , a , { l | x = e . m ( el ) : spl } , q ) ob ( o' , a' , pr , q' ) -> ob ( o , a , { l , Fut < T > y null | y = o' ! m ( el ) : x = y . get : spl } , q ) ob ( o' , a' , pr , q' )

  fresh ( o' )
  init ( C ) = pr
  atts ( C , |[ el ]| ( a circ l ) , o' , co ) = a'
  ----------------------------------------------------------------------------------------------------------------------------------------------------------- :: new_local_object
  ob ( o , a , { l | x = new local C ( el ) : spl } , q ) cogt ( co , o ) -> ob ( o , a , { l | x = o' : spl } , q ) cogt ( co , o ) ob ( o' , a' , idle , { pr } )

  fresh ( o' ) 
  fresh ( co' )
  init ( C ) = pr
  atts ( C , |[ el ]| ( a circ l ) , o' , co' ) = a'
  ----------------------------------------------------------------------------------------------------------------------------------------------- :: new_cog_object
  ob ( o , a , { l | x = new C ( el ) : spl } , q ) -> ob ( o , a , { l | x = o' : spl } , q ) ob ( o' , a' , pr , noproc ) cogt ( co' , o' )

defn
  st -> st' :: :: state :: ''
     {{ tex \begin{array}{c} [[st]] \\[[->]] [[st']]\end{array} }}
     {{ com state reduction }} by

  :formula_b_eq: |[ g ]| ( cn , a circ l ) = True
  ---------------------------------------------------------------------------------------- :: await_true
  { ob ( o , a , { l | await g : spl } , q ) cn } -> { ob ( o , a , { l | spl } , q ) cn }

  pr = select ( q , a , cn )
  a ( cog ) = co
  ------------------------------------------------------------------------------------------------------- :: activate
  { ob ( o , a , idle , q ) cogt ( co , noact ) cn } -> { ob ( o , a , pr , q \ pr ) cogt ( co , o ) cn }

  :formula_b_eq: |[ g ]| ( cn , a circ l ) = False
  ------------------------------------------------------------------------------------------------------------ :: await_false
  { ob ( o , a , { l | await g : spl } , q ) cn } -> { ob ( o , a , { l | suspend : await g : spl } , q ) cn }
