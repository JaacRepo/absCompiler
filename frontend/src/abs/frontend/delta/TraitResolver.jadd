import java.util.Map;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.common.*;
import abs.frontend.parser.*;


aspect TraitResolver {

    public abstract TraitSetExpr MethodModifier.applyToSet(TraitSetExpr set, ModuleDecl module);
    public final TraitSetExpr TraitExpr.resolve(ModuleDecl applyModule) {
        return resolve(applyModule, applyModule);
    }
    protected abstract TraitSetExpr TraitExpr.resolve(ModuleDecl applyModule, ModuleDecl lookupModule);

    private void ModifyMethodModifier.replaceOriginal(TraitSetExpr set, MethodImpl met, MethodImpl flattened) {
        //collect all original calls
        ArrayList<OriginalCall> list = new ArrayList<>();
        for (Stmt stmt : flattened.getBlock().getStmts()){
            collectOrig(list, stmt);
        }


        if(list.size() > 0){
            //rename
            int i = set.getNumMethodImpl();
            String name = met.getMethodSig().getName() + hashCode();
            MethodSig sig = met.getMethodSig().treeCopyNoTransform();
            sig.setName(name);

            //add
            MethodImpl newMet = met.treeCopyNoTransform();
            newMet.setParent(met.getParent());
            newMet.setMethodSig(sig);

            sig.setParent(newMet);
            set.getMethodImpls().setChild(newMet, i);

            //replace
            for (OriginalCall orig : list) {
                if(met.getParent().getParent() instanceof ClassDecl)
                    orig.replaceByRealCall(newMet, ((ClassDecl)met.getParent().getParent()).getDeltaMap().get(met.getMethodSig().getName()));
                else
                    orig.replaceByRealCall(newMet, null);
            }
        }
    }

    @Override
    public TraitSetExpr RemoveMethodModifier.applyToSet(TraitSetExpr set, ModuleDecl module) throws DeltaModellingException{
        applyToList(set.getMethodImplList());
        return set;
    }

    @Override
    public TraitSetExpr ModifyMethodModifier.applyToSet(TraitSetExpr set, ModuleDecl module) {
        TraitSetExpr curr = set;
        TraitExpr tt = getTraitExpr();
        ArrayList<MethodModifier> operations = new ArrayList<>();
        /*
         *  The syntax is TraitExpression MethodModifier.
         *  We search for the TraitExpression that is used by this 'adds'
         *  This may break the syntax, thus we collect all operation on the right
         *  and apply them one by one.
         */
        TraitExpr target = helperLeftMost(tt, operations);
        TraitSetExpr next = target.resolve(module);

        for (MethodImpl impl : next.getMethodImplList()) {
            curr = apply(curr, impl);
        }

        //necessary because the helper collects them in the wrong order
        Collections.reverse(operations);

        for (MethodModifier oper : operations) {
            curr = oper.applyToSet(curr, module);
        }
        return curr;
    }


    private TraitSetExpr ModifyMethodModifier.apply(TraitSetExpr set, MethodImpl met) throws DeltaModellingException{
        MethodSig mysig = met.getMethodSig();

        // in given ClassDecl: find MethodDecl that matches sig
        int found = -1;
        for (int i = 0; i < set.getNumMethodImpl(); i++) {
            MethodSig sig = set.getMethodImpl(i).getMethodSig();
            if (sig.matches(mysig)) {
                 found = i;
                break;
            }
        }
        if (found >= 0) {
            // replace MethodImpl
            MethodImpl method = met.treeCopyNoTransform();
            method.setFileName(met.getFileName());
            method.setParent(met.getParent());
            replaceOriginal(set, set.getMethodImpl(found), method);
            set.getMethodImpls().setChild(method, found);
        } else {
            MethodImpl method = met.treeCopyNoTransform();
            method.setFileName(met.getFileName());
            method.setParent(met.getParent());
            set.addMethodImpl(method);
        }
        return set;
    }

    @Override
    public TraitSetExpr AddMethodModifier.applyToSet(TraitSetExpr set, ModuleDecl module){
        TraitSetExpr curr = set;
        TraitExpr tt = getTraitExpr();
        ArrayList<MethodModifier> operations = new ArrayList<>();
        /*
         *  The syntax is TraitExpression MethodModifier.
         *  We search for the TraitExpression that is used by this 'adds'
         *  This may break the syntax, thus we collect all operation on the right
         *  and apply them one by one.
         */
        TraitExpr target = helperLeftMost(tt, operations);
        TraitSetExpr next = target.resolve(module);

        for (MethodImpl impl : next.getMethodImplList()) {
            MethodImpl newMet = impl.treeCopyNoTransform();
            newMet.setParent(impl.getParent());
            MethodSig newSig = impl.getMethodSig().treeCopyNoTransform();
            newSig.setParent(newMet);
            newMet.setMethodSig(newSig);
            curr.addMethodImpl(newMet);
        }
        //necessary because the helper collects them in the wrong order
        Collections.reverse(operations);

        for (MethodModifier oper : operations) {
            curr = oper.applyToSet(curr, module);
        }
        return curr;
    }

    /**
     * Looks up the TraitDecl this TraitNameExpr is referring to in the specified module.
     * @param module a ModuleDecl
     * @return a TraitDecl
     * @throws DeltaModellingException if the trait can't be found
     */
    public TraitDecl TraitNameExpr.getDecl(ModuleDecl module) throws DeltaModellingException {
        Decl decl = module.lookup(new KindedName(Kind.TRAIT_DECL, getName()));

        if (decl.isUnknown())
            throw new DeltaModellingException("couldn't resolve trait: " + getName() + " " + getPositionString());
        else
            return ((TraitDecl) decl);
    }

    @Override
    public TraitSetExpr TraitNameExpr.resolve(ModuleDecl applyModule, ModuleDecl lookupModule) throws DeltaModellingException {
        TraitDecl decl = getDecl(lookupModule);
        return decl.getTraitExpr().resolve(applyModule, decl.getModuleDecl());
    }

    @Override
    public TraitSetExpr TraitSetExpr.resolve(ModuleDecl applyModule, ModuleDecl lookupModule) throws DeltaModellingException {
	    TraitSetExpr result = this.treeCopyNoTransform();
	    result.setParent(applyModule);
	    return result;
    }

    @Override
    public TraitSetExpr TraitModifyExpr.resolve(ModuleDecl applyModule, ModuleDecl lookupModule) throws DeltaModellingException {
        TraitSetExpr set = getTraitExpr().resolve(applyModule, lookupModule);
        MethodModifier oper = this.getMethodModifier();
        return oper.applyToSet(set, applyModule);
    }

}
