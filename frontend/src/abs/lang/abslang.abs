module ABS.StdLib;

// Scalar datatypes
export Unit, String, Int, Rat, Bool, Fut, Exception, Location;

// Booleans
export True, False, and, not;

// Numerics
export max, min, abs, pow, sqrt_newton, exp_newton, random, truncate;

// rationals
export numerator, denominator;

// Basic utility datatypes
export Maybe, Nothing, Just, isJust, fromJust;
export Either, Left, Right, left, right, isLeft, isRight;
export Pair, fst, snd;
export Triple, fstT, sndT, trdT, trd;

// Sets
export Set, EmptySet, Insert, set; //TODO: don't export EmptySet, Insert

export contains, emptySet, size, elements, union, intersection, difference,
  isSubset, insertElement, remove, take, takeMaybe, hasNext, next;

// Lists
export List, Nil, Cons, head, tail, list;
export length, isEmpty, nth, without, concatenate, appendright, reverse, copy;

// Maps
export Map, EmptyMap, InsertAssoc, map; // TODO: don't export EmptyMap, InsertAssoc

export emptyMap, removeKey, values, keys, lookup, lookupMaybe, lookupUnsafe,
  lookupDefault, insert, put;
  
// String functions
export toString, intToString, substr, strlen;

// Real-Time ABS datatypes
export Time, timeValue, currentms, now, timeDifference, timeLessThan;
export Duration, InfDuration, durationValue, isDurationInfinite, addDuration, subtractDuration, durationLessThan, subtractFromDuration;
export lowlevelDeadline, deadline;
export Deadline, Critical;

// KeY-ABS annotations
export Inv, Pre, Post;

// Various annotations
export Annotation, TypeAnnotation, LocationType, Far, Near, Somewhere, Infer;
export COG, Plain, Final, Atomic;
export HTTPName, HTTPCallable;

// Functional breakpoints
// TODO: find out where they are defined / used
export watch, watchEx;

// Input/Output
export println, print, readln;

export * from ABS.StdLib.Exceptions;

import * from ABS.StdLib.Exceptions;

data Unit = Unit;               // builtin  
data String;                    // builtin  
data Int;                       // builtin
data Rat;                       // builtin
data Bool = True | False;       // builtin
data Fut<A>;                    // builtin
data Exception;                 // builtin
data Location;                  // (For Component model) //

def Bool and(Bool a, Bool b) = a && b;
def Bool not(Bool a) = !a;

def A max<A>(A a, A b) = if a > b then a else b;
def A min<A>(A a, A b) = if a < b then a else b;
    
def Rat abs(Rat x) = if x > 0 then x else -x;

def Rat pow(Rat b, Int n) =
    if n < 0
    then 1 / pow(b, -n)
    else case n {
        0 => 1;
        _ => b * pow(b, n-1);
    };

def Rat sqrt_newton(Rat x, Rat estimate, Rat epsilon) =
  let (Rat next) = (estimate + x / estimate)/2
  in if abs(estimate - next) < epsilon
    then estimate
    else sqrt_newton(x, next, epsilon);

def Rat exp_newton_helper(Rat acc, Rat x, Int next_round, Rat numerator, Int denominator, Rat epsilon) =
  let (Rat next) = (numerator * x) / (denominator * next_round)
  in if abs(next) < epsilon
    then acc + next
    else exp_newton_helper(acc + next, x, next_round + 1, numerator * x, denominator * next_round, epsilon);

def Rat exp_newton(Rat x, Rat epsilon) =
  if (x < 0) then 1/exp_newton_helper((1 - x + (x * x) / 2), -x, 3, x*x, 2, epsilon)
  else exp_newton_helper((1 + x + (x * x) / 2), x, 3, x * x, 2, epsilon);


/**
 * Returns a random number between 0 (inclusive) and below (exclusive).
 */
def Int random(Int below) = builtin;

/**
 * Truncates a towards zero.
 */
def Int truncate(Rat a) = builtin;

/**
 * Returns numerator of canonical form of a.
 */
def Int numerator(Rat a) = builtin;

/**
 * Returns denominator of canonical form of a.
 */
def Int denominator(Rat a) = builtin;

data Maybe<A> = Nothing | Just(A fromJust);

def Bool isJust<A>(Maybe<A> a) = 
    case a { Just(j) => True; Nothing => False; };

data Either<A, B> = Left(A left) | Right(B right);

def Bool isLeft<A,B>(Either<A, B> val) = 
    case val { Left(x) => True; _ => False; };
    
def Bool isRight<A,B>(Either<A, B> val) = !isLeft(val);


data Pair<A, B> = Pair(A fst, B snd); 

data Triple<A, B, C> = Triple(A fstT, B sndT, C trdT);

// legacy, deprecated
def C trd<A, B, C>(Triple<A, B, C> t) = case t {
    Triple(_, _, val) => val; };

// Sets

// Sets are currently implemented as sorted lists (any implementation
// must yield the same structure regardless of insertion order so that
// set equality via == is preserved).  Using the Insert_ constructor
// directly is strongly discouraged.
data Set<A> = EmptySet | Insert(A, Set<A>);

// set constructor helper
def Set<A> set<A>(List<A> l) = 
    case l { 
       Nil => EmptySet; 
       Cons(x,xs) => insertElement(set(xs), x); 
    };

/**
 * Returns True if set 'ss' contains element 'e', False otherwise.
 */
def Bool contains<A>(Set<A> ss, A e) =
  case ss {
    EmptySet => False ;
    Insert(e, _) => True;
    Insert(x, xs) => if x > e then False else contains(xs, e);
  };
  
/**
 * Returns True if set 'xs' is empty, False  otherwise.
 */
def Bool emptySet<A>(Set<A> xs) = (xs == EmptySet); 

/**
 * Returns the size of set 'xs'.
 */
def Int size<A>(Set<A> xs) = 
   case xs {
      EmptySet => 0 ; 
      Insert(s, ss) => 1 + size(ss); 
   };

/**
 * Returns a list containing the elements of set `xs'.
 */
def List<A> elements<A>(Set<A> xs) =
  case xs {
      EmptySet => Nil;
      Insert(s, ss) => Cons(s, elements(ss));
  };

/**
 * Returns the union of sets 'set1' and 'set2'.
 */
def Set<A> union<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => set2;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => set1;
          Insert(e1, ss2) => Insert(e1, union(ss1, ss2));
          Insert(e2, ss2) =>
            if e1 < e2
            then Insert(e1, union(ss1, set2))
            else Insert(e2, union(set1, ss2));
      };
   }; 

/**
 * Returns the intersection of sets 'set1' and 'set2'.
 */
def Set<A> intersection<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => EmptySet;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => EmptySet;
          Insert(e1, ss2) => Insert(e1, intersection(ss1, ss2));
          Insert(e2, ss2) =>
            if e1 < e2
            then intersection(ss1, set2)
            else intersection(set1, ss2);
      };
   };

/**
 * Returns the difference of sets 'set1' and 'set2', i.e., all
 * elements of 'set1' that are not in 'set2'.
 */
def Set<A> difference<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => EmptySet;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => set1;
          Insert(e1, ss2) => difference(ss1, ss2);
          Insert(e2, ss2) =>
            if e1 < e2
            then Insert(e1, difference(ss1, set2))
            else difference(set1, ss2);
      };
   };

/**
 * Returns True if set 'set' contains all element of 'maybe_subset', False
 * otherwise.
 */
def Bool isSubset<A>(Set<A> maybe_subset, Set<A> set) =
    case maybe_subset {
        EmptySet => True;
        Insert(elem, rest) => contains(set, elem) && isSubset(rest, set);
    };


/**
 * Returns a set with all elements of set 'xs' plus element 'e'.
 * Returns 'xs' if 'xs' already contains 'e'.
 */
def Set<A> insertElement<A>(Set<A> xs, A e) =
  case xs {
      EmptySet => Insert(e, EmptySet);
      Insert(e, _) => xs;
      Insert(x, ss) => if e < x then Insert(e, xs) else Insert(x, insertElement(ss, e));
  };

/**
 * Returns a set with all elements of set 'xs' except element 'e'.
 */
def Set<A> remove<A>(Set<A> xs, A e) = 
  case xs {
     EmptySet => EmptySet ;
     Insert(e, ss) => ss;
     Insert(x, ss) => if e < x then xs else Insert(x, remove(ss, e));
  };

/**
 * Returns one (arbitrary) element from a set.
 * To iterate over a set, take one element and remove it from the set.
 * Repeat until set is empty.
 */
def A take<A>(Set<A> ss) =
  case ss {
    Insert(e, _) => e;
  };

/**
 * Returns one (arbitrary) element from a set, or Nothing for empty sets.
 */
def Maybe<A> takeMaybe<A>(Set<A> ss) =
  case ss {
    EmptySet => Nothing;
    Insert(e, _) => Just(e);
  };



// checks whether the input set has more elements to be iterated.
def Bool hasNext<A>(Set<A> s) = ! emptySet(s); 

// Partial function to iterate over a set.
def Pair<Set<A>,A> next<A>(Set<A> s) = 
   case s { 
      Insert(e, set2) => Pair(set2,e); 
   };

// Lists
data List<A> = Nil | Cons(A head, List<A> tail);

def List<A> list<A>(List<A> l) = l; // list constructor helper

/**
 * Returns the length of list 'list'.
 */
def Int length<A>(List<A> list) = 
   case list { 
      Nil => 0 ; 
      Cons(p, l) => 1 + length(l) ; 
   };

/**
 * Returns True if list 'list' is empty, False otherwise.
 */
def Bool isEmpty<A>(List<A> list) = list == Nil;

/**
 * Returns element 'n' of list 'list'.
 */
def A nth<A>(List<A> list, Int n) = 
  case n { 
    0 => head(list) ; 
    _ => nth(tail(list), n-1); 
  };
  
/**
 * Returns a list where all occurrences of a have been removed
 */
def List<A> without<A>(List<A> list, A a) =
  case list {
     Nil => Nil;
     Cons(a, tail) => without(tail,a);
     Cons(x, tail) => Cons(x, without(tail,a));
  };  
  
/**
 * Returns a list containing all elements of list 'list1'
 * followed by all elements of list 'list2'.
 */
def List<A> concatenate<A>(List<A> list1, List<A> list2) =
  case list1 { 
    Nil => list2 ; 
    Cons(head, tail) =>  Cons(head, concatenate(tail, list2)); 
  };
  
/**
 * Returns a list containing all elements of list 'list' followed by 'p'.
 */
def List<A> appendright<A>(List<A> list, A p) = 
    concatenate(list, Cons(p, Nil));

/**
 * Returns a list containing all elements of 'list' in reverse order.
 */
def List<A> reverse<A>(List<A> list) =
  case list { 
     Cons(hd, tl) => appendright(reverse(tl), hd); 
     Nil => Nil; 
  };
  
/**
 * Returns a list of length 'n' containing 'p' n times.
 */
def List<A> copy<A>(A p, Int n) = 
   case n { 0 => Nil; m => Cons(p,copy(p,m-1)); };




// Maps
data Map<A, B> = EmptyMap | InsertAssoc(Pair<A, B>, Map<A, B>);
 // map constructor helper (does not preserve injectivity)
def Map<A, B> map<A, B>(List<Pair<A, B>> l) =
  case l { 
     Nil => EmptyMap; 
     Cons(hd, tl) => InsertAssoc(hd, map(tl)); 
  };

/**
 * Returns True if map 'map' is empty, False otherwise.
 */
def Bool emptyMap<A, B>(Map<A, B> map) = (map == EmptyMap);

def Map<A, B> removeKey<A, B>(Map<A, B> map, A key) = // remove from the map
  case map {
  	EmptyMap => map;
    InsertAssoc(Pair(key, _), m) => m;
    InsertAssoc(pair, tail) => InsertAssoc(pair, removeKey(tail, key));
  };
    

def List<B> values<A, B>(Map<A, B> map) =
  case map {
    EmptyMap => Nil ;
    InsertAssoc(Pair(_, elem), tail) => Cons(elem, values(tail)) ;
  };

/**
 * Returns a set containing all keys of map 'map'.
 */
def Set<A> keys<A, B>(Map<A, B> map) =
  case map { 
    EmptyMap => EmptySet ;
    InsertAssoc(Pair(a, _), tail) => insertElement(keys(tail), a); 
  };
    
/**
 * Returns the value associated with key 'k' in map 'ms', or 'Nothing'.
 */
def Maybe<B> lookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => Just(y);
     InsertAssoc(_, tm) => lookup(tm, k);
     EmptyMap => Nothing;
  };

/**
 * Compatibility stub for #342. DEPRECATED!
 */
def Maybe<B> lookupMaybe<A, B>(Map<A, B> ms, A k) = lookup(ms, k);

/**
 * Returns the value associated with key 'k' in map 'ms',
 * or fails if not present.
 */
def B lookupUnsafe<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  fromJust(lookup(ms,k));
  
/**
 * Returns the value associated with key 'k' in map 'ms', or the value 'd'
 * if 'k' has no entry in 'ms'.
 */
def B lookupDefault<A, B>(Map<A, B> ms, A k, B d) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => y;
     InsertAssoc(_, tm) => lookupDefault(tm, k, d);
     EmptyMap => d;
  };

/**
 * Returns a map with all entries of 'map' plus an entry 'p',
 * which might override but not remove another entry with the same key.
 */
def Map<A, B> insert<A, B>(Map<A, B> map, Pair<A, B> p) = InsertAssoc(p, map);

/**
 * Returns a map with all entries of 'ms' plus an entry mapping 'k' to 'v',
 * minus the first entry already mapping 'k' to a value.
 */  
def Map<A, B> put<A, B>(Map<A, B> ms, A k, B v) =
  case ms {
    EmptyMap => InsertAssoc(Pair(k, v),EmptyMap);
    InsertAssoc(Pair(k, _), ts) => InsertAssoc(Pair(k, v), ts);
    InsertAssoc(p, ts) => InsertAssoc(p, put(ts, k, v));
  };

/**
 * Returns a string with the base-10 textual representation of 'n'.
 *
 * This function is from the distant past when ABS had no generic `toString'.
 * Kept for backward compatibility.
 */

def String intToString(Int n) = toString(n);

/**
 * Returns a substring of string str of the given length starting from start (inclusive)
 * Where the first character has index 0
 * 
 * Example:
 *    substr("abcde",1,3) => "bcd"
 *     
 */
def String substr(String str, Int start, Int length) = builtin;

/**
 * Returns the length of the given string
 */
def Int strlen(String str) = builtin;

/**
 * Returns a string representation for t.
 */
def String toString<T>(T t) = builtin;

// Time and Duration datatypes.

// Time can be an integer value or InfTime.  Duration is aways an
// integer.
// 
// Durations can be added and subtracted from Times, and compared to
// each other.  Times can be compared to each other.
data Time = Time(Rat timeValue);
def Rat currentms() = builtin;
def Time now() = Time(currentms());

// use this like so:
//   Time t = now(); await timeDifference(now(), t) > 5;
def Rat timeDifference(Time t1, Time t2) =
  abs(timeValue(t2) - timeValue(t1));
def Bool timeLessThan(Time t1, Time t2) = // TODO: remove this, use <
  timeValue(t1) < timeValue(t2);

data Duration = Duration(Rat durationValue) | InfDuration;
def Bool isDurationInfinite(Duration d) = 
  case d { Duration(_) => False; InfDuration => True; };

def Time addDuration(Time t, Duration d) =
  Time(timeValue(t) + durationValue(d));

def Time subtractDuration(Time t, Duration d) =
  Time(timeValue(t) - durationValue(d));

def Bool durationLessThan(Duration d1, Duration d2) =
  case d1 {
      Duration(v1) => case d2 {
          Duration(v2) => v1 < v2; 
          InfDuration => False; };
      // If d1 and d2 are infinite, < is not antisymmetric ...
      InfDuration => False;
  };

// negative if no (i.e. infinite) deadline
def Rat lowlevelDeadline() = builtin;
def Duration deadline() = 
  case lowlevelDeadline() < 0 {
      True => InfDuration;
      False => Duration(lowlevelDeadline());
  };

def Duration subtractFromDuration(Duration d, Rat v) =
  case d {
      InfDuration => InfDuration;
      Duration(x) => Duration(x - v);
  };

// Annotation data types for KeyABS invariants, preconditions, postconditions
data Inv;
data Pre;
data Post;

// Annotation data type to express deadlines:
// [Deadline: Duration(5)] o!m();
type Deadline = Duration;
type Critical = Bool;

/**
 * Annotation data type to define the type of annotations
 * currently only TypeAnnotation exists
 */
data Annotation = TypeAnnotation; 
 
[TypeAnnotation]
data LocationType = Far | Near | Somewhere | Infer;
 
/**
 * Can be used to annotated classes and to ensure that
 * classes are always instantiated in the right way.
 * I.e. classes annotated with [COG] must be created via
 * "new", class annotated with [Plain] must be created by using
 * "new local".
 */
data ClassKindAnnotation = COG | Plain;

/**
 * Declare local variables to be final
 */
data FinalAnnotation = Final;

/**
 * Declare methods to be atomic, i.e., such methods must not
 * contain scheduling code and also no .get
 */
data AtomicityAnnotation = Atomic;

/**
 * Declare methods to be callable from the HTTP API.
 */
data HTTPCallableAnnotation = HTTPCallable;


// functional break point
def A watch<A>(A val) = builtin;
def A watchEx<A, B>(A val, B info) = builtin;

// input/output, first version
def Unit println(String s) = builtin;
def Unit print(String s) = builtin;
def String readln() = builtin;

// Annotation for marking objects, interface methods as accessible via HTTP
type HTTPName = String;

module ABS.StdLib.Exceptions;
export *;
// These are in their own module (and re-exported from ABS.StdLib) to
// work around a bug when defining exceptions in the ABS.StdLib
// module.  On the other hand, we might want to divide ABS.StdLib into
// submodules anyway once we have a documentation generator etc.
exception DivisionByZeroException;
exception AssertionFailException;
exception PatternMatchFailException;
exception NullPointerException;
exception StackOverflowEcxeption;
exception HeapOverflowException;
exception KeyboardInterruptException;
exception ObjectDeadException;





