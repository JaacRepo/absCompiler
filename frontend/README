How to use the ABS Frontend tools
=================================

Building the toolchain
----------------------

Build the dist/absfrontend.jar file with

    ant

`ant` and Java must be installed; Java must be at least version 7.
You may need to set the following variable:

    export ANT_OPTS=-Xmx1g

A successful build generates the file `dist/absfrontend.jar` which
contains the compiler and runtime support files.  A convenience script
called `absc` that invokes the ABS compiler can be found in
`bin/bash/` (for Unix-like systems) and `bin/win` (for Windows).

Compiling ABS code
------------------

Use the ABS frontend with

    bin/bash/absc [options] <absfiles>

Using the Maude backend
-----------------------

Compile to Maude with

    bin/bash/absc -maude <absfiles> -o <file.maude>

To run the model, start Maude (download it from
<http://maude.cs.uiuc.edu/download/>) and load the compiled model with
`in <file.maude>`.

After loading the model into Maude, start it with the command

    rew start .

(This assumes that the model terminates - if it does not, you can
restrict the number of rewrite steps via the usual options to the
`rew` or `frew` command.)

Using the Erlang backend
------------------------

The Erlang backend needs Erlang to be installed when compiling or
running a model.  Compile to Erlang with

      bin/bash/absc -erlang [options] <absfiles>

The output will be put in `gen/erl`.

A model can be started with two different commands, both of which are
generated inside `gen/erl`:

    % gen/erl/run [--debug|-d] [<main-module>]
    % gen/erl/start_console [--debug|-d] [<main-module>]

The command `run` launches an Erlang script, that terminates
after the model terminates.

`start` launches an Erlang shell and executes the given main module, offering
an Erlang prompt afterwards.  If no module name is given, the system will try
to start the main block of the last module defined in the model.

The flag `--debug` controls if debug output is enabled.

The runtime can be started from within the Erlang shell by calling
`runtime:start().` or `runtime:start(Args).`, where `Args` is a string
corresponding to `[--debug|-d] [<main-module>]`.  Again, if no module
name is given, the system will try to start the main block of the last
module defined in the model.

The backend has been tested with Erlang R18; it will not compile with Erlang
R16 and earlier.


Using the Java backend
----------------------

Note that the Java backend is only partly maintained.

Compile to Java with

    bin/bash/absc -java [options] [-d <dir>] <absfiles>
  
OR

    java -cp dist/absfrontend.jar abs.backend.java.JavaBackend [-d <dir>] <absfiles>

This will generate Java source files and corresponding `.class` files
into `dir`, where additional subdirectories are created for each
module.
   
It is also possible to only generate the Java source files and not the
`.class` files by using the `-sourceonly` option. In that case the
resulting Java files have to be compiled by a standard Java
compiler. For example,

    find <dir> -name '*.java'|xargs javac -classpath dist/absfrontend.jar 

For each module that has a Main block, the generated files contain a
class `ModuleName.Main` with a standard `main` method, which can be
executed like a standard Java program, e.g.:

    java -cp dist/absfrontend.jar:<dir> MyModule.Main
   

<!-- Local Variables: -->
<!-- mode: markdown -->
<!-- End: -->
